import{_ as a,c as t,o as s,a2 as n}from"./chunks/framework.84TDCN6B.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Dart/Dart的变量声明.md","filePath":"Dart/Dart的变量声明.md"}'),p={name:"Dart/Dart的变量声明.md"},e=n(`<p><strong>var和dynamic声明变量</strong></p><p>在Dart中，可以使用var声明变量，var声明的变量一旦被声明，系统会推断其类型并确定，后期就不能修改其类型，而只能修改为同类型的值。</p><p>使用dynamic声明的变量是动态类型，后期可以修改为其它类型，但系统每次都会根据值而推断其类型。</p><p>不过，var和dynamic都没有在声明时指定类型，为了类型安全，推荐声明变量时就指定明确的类型，而不是使用模棱两可的var和dynamic。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int  a = 1 ;</span></span>
<span class="line"><span>String  b = &quot;hello,world&quot; ;</span></span></code></pre></div><p><strong>const和final声明常量</strong></p><p>const和final声明的是不会变化的常量。</p><p>const 声明的常量必须在声明时就指定值，否则报错。</p><p>final 声明的变量比const宽松，可以在后期赋值。</p><p>综上所述，为了保证代码的安全性，推荐使用的方式是：</p><ul><li>直接注明具体的类型，而不使用var和dynamic。</li><li>如果是常量，使用const而不是final。</li></ul><p><strong>变量的作用域</strong></p><p>Dart的变量分为全局变量、类变量、局部变量。在class外声明的变量为全局变量，在类中声明的变量为类变量，在类的方法块中声明的变量为局部变量。</p><p>与其它语言一样，作用域的作用有两个：隔离访问和避免命名冲突。作用域内的变量可以访问作用域外的变量，反过来则不可以。</p><p>在不同的作用域内可以使用声明同名变量，这与在不同的文件夹内可以新建相同名称的文件的道理一样。当访问某个变量时，会优先从本作用域开始，依次往上层作用域查找，找到即停止。</p><p>通过下划线声明的变量只能在本文件中使用，不能跨文件使用。</p>`,16),o=[e];function r(i,c,l,_,d,m){return s(),t("div",null,o)}const u=a(p,[["render",r]]);export{h as __pageData,u as default};
