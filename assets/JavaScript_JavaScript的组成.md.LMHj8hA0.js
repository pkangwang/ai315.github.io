import{_ as a,c as t,o as r,a2 as i}from"./chunks/framework.84TDCN6B.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/JavaScript的组成.md","filePath":"JavaScript/JavaScript的组成.md"}'),p={name:"JavaScript/JavaScript的组成.md"},s=i('<p>一般而言，我们所说的Javascript指的是客户端Javascript，也就是浏览器中的Javascript脚本。但是，严格来讲，根据使用环境，我们将Javascript分为两类：</p><ul><li><p><strong>客户端Javascript</strong>：在浏览器中运行的Javascript。</p></li><li><p><strong>服务端Javascript</strong>：可以访问本地操作系统的Javascript。比如最初的Node.js，以及近几年比较热门的Deno.js、Bun.js。</p></li></ul><h2 id="客户端javascript的组成" tabindex="-1">客户端JavaScript的组成 <a class="header-anchor" href="#客户端javascript的组成" aria-label="Permalink to &quot;客户端JavaScript的组成&quot;">​</a></h2><p>客户端JavaScript由ECMAScript、BOM、DOM三部分组成：</p><ul><li><p><strong>EcmaScript</strong>：即ECMA-262定义的国际标准，定义了语法规则、数据类型、关键字、模块、全局对象等核心语言特性。</p></li><li><p><strong>DOM</strong>（Document Object Model）：文档对象模型，规定了JavaScript如何操作HTML元素。</p></li><li><p><strong>BOM</strong>（Browser Object Model）：浏览器对象模型，用于与浏览器窗口交互，例如页面导航、浏览历史、离线存储等。</p></li></ul><h2 id="服务端javascript的组成" tabindex="-1">服务端JavaScript的组成 <a class="header-anchor" href="#服务端javascript的组成" aria-label="Permalink to &quot;服务端JavaScript的组成&quot;">​</a></h2><p>以Node.js为例，其Javascript的组成分为如下几部分：</p><ul><li><p><strong>EcmaScript</strong>：即ECMA-262定义的国际标准，定义了语法规则、数据类型、关键字、模块、全局对象、异步、代理等核心语言特性。</p></li><li><p><strong>CommonJS</strong>：用于访问本地操作系统的API，包含了大量开箱急用的模块，例如文件系统模块fs、操作系统模块os、Web服务器模块http等。</p></li></ul>',8),c=[s];function o(e,n,l,_,v,J){return r(),t("div",null,c)}const h=a(p,[["render",o]]);export{S as __pageData,h as default};
