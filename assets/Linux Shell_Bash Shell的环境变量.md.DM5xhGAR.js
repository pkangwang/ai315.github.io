import{_ as a,c as e,o as l,a2 as s}from"./chunks/framework.84TDCN6B.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/Bash Shell的环境变量.md","filePath":"Linux Shell/Bash Shell的环境变量.md"}'),i={name:"Linux Shell/Bash Shell的环境变量.md"},t=s('<h2 id="内置环境变量" tabindex="-1">内置环境变量 <a class="header-anchor" href="#内置环境变量" aria-label="Permalink to &quot;内置环境变量&quot;">​</a></h2><p>以下是直接可以使用的环境变量，注意区分大小写。</p><ul><li>HOME ： 当前用户家目录</li><li>USER：用户名</li><li>CDPATH： 以冒号分隔的目录列表，作为cd命令的搜索路径</li><li>PS1 ： shell命令行的主提示符</li><li>PS2： shell命令行的次提示符</li><li>PATH： shell查找命令时检索的目录列表，以冒号分隔</li><li>BASH ： bash shell 当前实例的完整路径名</li><li>BASH_VERSION：bash版本</li><li>LANG ：当前环境的语言</li><li>HISTFILE：历史文件的位置，通常位于<code>$HONE/.bash_history</code></li><li>HISTFILESIZE：可以存储的历史命令条数，默认为1000，这个值对于大多数情况够用。</li><li>HOSTNAME： 当前主机名称</li><li>OSTYPE：操作系统类型。</li><li>LINES ：终端山可见的行数</li><li>PS0：执行命令之前显示的内容</li><li>PWD：当前工作目录</li></ul><h2 id="修改path环境变量" tabindex="-1">修改PATH环境变量 <a class="header-anchor" href="#修改path环境变量" aria-label="Permalink to &quot;修改PATH环境变量&quot;">​</a></h2><p>一个非常常见的场景是将一些路径添加到PATH环境变量的路径列表中，也就是修改PATH环境变量的值。</p><p>例如，将家目录的bin目录添加到PATH环境变量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$PATH=&quot;${PATH}:/${HOME}/bin&quot;</span></span></code></pre></div><h2 id="新增和修改自定义环境变量" tabindex="-1">新增和修改自定义环境变量 <a class="header-anchor" href="#新增和修改自定义环境变量" aria-label="Permalink to &quot;新增和修改自定义环境变量&quot;">​</a></h2><p>export命令可以将指定的变量设置为环境变量。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ENV_EXANPLE=ENV_EXAMLLE_VALUE</span></span>\n<span class="line"><span>$ export ENV_EXANPLE</span></span></code></pre></div><p>也可以写在一起：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>export ENV_EXANPLE=ENV_EXAMLLE_VALUE</span></span></code></pre></div><p>读取环境变量和普通变量的方式一样，使用美元符<code>$</code>。</p><p>不过，此时环境变量还没有永久生效，当重启后，自定义环境变量就就会被清除，要让自定义环境变量永久生效，一个常用的方式是将该行命令添加到<code>$HOME/.bashrc</code>。然后执行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>source $HOME/.bashrc</span></span></code></pre></div><p>这会立即生效，而无需重启或注销。</p><h2 id="普通变量和环境变量的区别" tabindex="-1">普通变量和环境变量的区别 <a class="header-anchor" href="#普通变量和环境变量的区别" aria-label="Permalink to &quot;普通变量和环境变量的区别&quot;">​</a></h2><p>普通变量和自定义环境变量本质上都是变量，声明和使用的方式一模一样，这两者的区别主要在于生命周期的不同。</p><ul><li>普通变量是临时的，只在此次使用shell时有用，下次使用shell（注销或重启后）就不存在了。</li><li>环境变量包括内置的和自定义的，是永久可以使用的。</li></ul><p>是否要将普通变量永久保存，也就是变为环境变量，取决于自己的实际需求。一般而言，需要重读多次使用的变量应该提升为环境变量，少数几次使用的则使用普通变量即可。</p>',20),p=[t];function n(o,h,c,d,r,u){return l(),e("div",null,p)}const b=a(i,[["render",n]]);export{E as __pageData,b as default};
