import{_ as s,c as a,o as i,a2 as l}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/条件表达式.md","filePath":"Linux Shell/条件表达式.md"}'),n={name:"Linux Shell/条件表达式.md"},e=l(`<h2 id="数值比较" tabindex="-1">数值比较 <a class="header-anchor" href="#数值比较" aria-label="Permalink to &quot;数值比较&quot;">​</a></h2><p>与数学公式不同，数值比较需要用到-gt、-lt、-eq表示大于、小于、等于号</p><ul><li>-eq 数值相等</li><li>-ne 不等</li><li>-gt n1 大于n2</li><li>-lt 小于</li><li>-ge 大于等于</li><li>-le 小于等于</li><li>助记 : e是相等的缩写(equal) ； n是不相等的意思（non-equal）；gt是大于的缩写（GreaterThan）；lt是小于的缩写（LessThan）； 表格示例中空格间距比较大，就是为了题型注意各个部分一定要加上空格。</li></ul><p>示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ 1 -eq 1 ] &amp;&amp; echo 真 || echo 假  # 1是否等于1?</span></span>
<span class="line"><span>[ 3 -gt 2 ] &amp;&amp; echo 真 || echo 假  # 3是否大于2?</span></span></code></pre></div><h2 id="字符串比较" tabindex="-1">字符串比较 <a class="header-anchor" href="#字符串比较" aria-label="Permalink to &quot;字符串比较&quot;">​</a></h2><p>字符串的比较方式是根据ASCII逐个字母比较，常用的字符串比较运算符如下：</p><ul><li>= | 相同 |</li><li>!= | 不同 |</li><li>&lt; | 小于 |</li><li><code>\\&gt;</code> | 大于 , 由于大于号是重定向字符,因此必须转义</li><li>-n str | 字符串str长度是否非0 |</li><li>-z str | 字符串str长度是否为0 |</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&quot;hello&quot;</span></span>
<span class="line"><span>str2=&quot;HELLO&quot;</span></span>
<span class="line"><span>[ $str1 = $str2 ]  &amp;&amp; echo 真 || echo 假  # 输出假,因为区分大小写</span></span>
<span class="line"><span>[ $str1 &gt; $str2 ]  &amp;&amp; echo 真 || echo 假  # 输出真,a的序号是97,A的序号是65</span></span>
<span class="line"><span>[ $str1 = hello ]  &amp;&amp; echo 真 || echo 假  # 输出真</span></span>
<span class="line"><span>[ -n $str1 ] &amp;&amp; echo 真 || echo 假  # 输出真,长度非0</span></span></code></pre></div><p>使用双中括号进行字符串的模糊匹配</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>str1=&quot;hello&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[[ $str1 = he ]]  &amp;&amp; echo 真 || echo 假 # 输出假,此时默认进行精确模式匹配</span></span>
<span class="line"><span>[[ $str1 = he* ]]  &amp;&amp; echo 真 || echo 假 # 输出真</span></span></code></pre></div><h2 id="文件判断" tabindex="-1">文件判断 <a class="header-anchor" href="#文件判断" aria-label="Permalink to &quot;文件判断&quot;">​</a></h2><p>文件判断常用的运算符如下表：</p><ul><li>-d file | 判断file是否为目录</li><li>-e file | 判断file是否存在</li><li>-f file | 检查file是否为文件</li><li>-r file | 判断文件是否可读</li><li>-s file | 判断file是否存在并非空</li><li>-w file | 判断file是可写</li><li>-x file | 判断file是可执行</li></ul><p>例如当前文件夹下存在一个文件 test.txt, 则如下输出真:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ -f test.txt ] &amp;&amp; echo 真 || echo 假</span></span></code></pre></div><p>例如当前文件夹下存在一个目录 example, 则如下输出真:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[ -d example ] &amp;&amp; echo 真 || echo 假</span></span></code></pre></div><p>在当前目录下新建一些文件,如下示例可以判断一些文件的后缀, 以便进一步的操作:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ $file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.md ]] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}是markdown文件&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ $file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.txt ]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}是txt文件&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}不是markdown或txt文件&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div>`,20),p=[e];function t(h,o,k,c,d,r){return i(),a("div",null,p)}const m=s(n,[["render",t]]);export{u as __pageData,m as default};
