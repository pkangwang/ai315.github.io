import{_ as e,c as i,o as l,a2 as a}from"./chunks/framework.84TDCN6B.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Office Skills/使用 Blender 进行视频剪辑.md","filePath":"Office Skills/使用 Blender 进行视频剪辑.md"}'),t={name:"Office Skills/使用 Blender 进行视频剪辑.md"},r=a('<h2 id="笔记" tabindex="-1">笔记 <a class="header-anchor" href="#笔记" aria-label="Permalink to &quot;笔记&quot;">​</a></h2><p>硬剪切和软剪切： 按K是软剪切，对于剪切后的片段，再拖动其剪切点进行长度扩展时，还是会显示原始素材的内容。如果是硬剪切，就是真正的将片段一分为二，再拖动端点进行长度扩展就看不到原始的内容了。</p><h2 id="视频剪辑面板常用快捷键" tabindex="-1">视频剪辑面板常用快捷键 <a class="header-anchor" href="#视频剪辑面板常用快捷键" aria-label="Permalink to &quot;视频剪辑面板常用快捷键&quot;">​</a></h2><ul><li>shift+a 添加素材为片段</li><li>按住G可以移动片段，同时按住X锁定水平移动、按住Y锁定垂直移动</li><li>移动时按住Ctrl可以进行吸附</li><li>按住B进行框选</li><li>按K进行切割，切割点为时间线</li><li>H 隐藏片段、Alt+H取消隐藏</li><li>Alt+左箭头跟左边的片段交换顺序，Alt+右箭头跟右边的片段交换顺序</li><li>鼠标滚轮横向缩放、鼠标中键整体移动、Ctrl+鼠标滚轮左右移动</li></ul><h2 id="使用代理视频剪辑时的卡顿问题" tabindex="-1">使用代理视频剪辑时的卡顿问题 <a class="header-anchor" href="#使用代理视频剪辑时的卡顿问题" aria-label="Permalink to &quot;使用代理视频剪辑时的卡顿问题&quot;">​</a></h2><p><img src="https://docs.blender.org/manual/zh-hans/3.0/_images/video-editing_introduction_screen-layout.png" alt="Blender VSE | 1000"></p><p>使用Blender 视频剪辑面板导入视频后，在拖拽时间线、预览视频时都有明显的卡顿，这是因为编辑预览的都是原先画质的视频，对于一般的电脑吃不消。</p><p>此时就需要设置一个代理。代理的意思是用一个低配画质的视频代表原先的视频，剪辑和预览时都是针对低配画质的操作，毕竟剪辑的时候只需要能看清楚就行，最终导出的时候依然是原先的画质。</p><p>打个简单的比方，普通电脑播放4K视频时会有卡顿感，此时降低画质到1080P就好一点，如果再讲到720P就会更流畅。有些时候，我们只需要看内容即可，并不需要非常高的画质，代理就是这个意思。</p><p>在多媒体编辑领域，有很多时候就需要用到代理，比如PR、Final Cut、AE、Maya等。本质，就是用一个低质量的东西代表原先高质量的东西。</p><p>Blender的设置代理的操作如下：</p><ul><li>在时间线右侧选项卡中找到“Proxy &amp; Cache（代理）选项卡”</li><li>选中要代理的视频片段，通常是高码率高画质的片段。</li><li>点击 “Set Strip Strip Proxies（设置已选中剪辑代理）” ，选择25%，意思是使用25%的画质质量。</li><li>点击 “Rebuild Proxy and Timecode Indices（重建代理及时间码编号）”。此时，在时间线面板下会出现一个进度条“Building Proxies（正在生成代理中）”。</li><li>在上方视频预览面板的右侧找到“View（视图）”选项卡，在“Proxy Render Size（代理渲染尺寸）”的下拉框选择 Proxy Size 25% 。此时可以看到预览窗口的画质明显降低了。同时勾选“使用代理”。</li><li>此时画质稍有降低，但是更流畅了。</li></ul>',12),n=[r];function o(d,s,_,c,p,h){return l(),i("div",null,n)}const m=e(t,[["render",o]]);export{f as __pageData,m as default};
