import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.84TDCN6B.js";const g=JSON.parse('{"title":"Dart网络编程","description":"","frontmatter":{},"headers":[],"relativePath":"Flutter/Dart网络编程.md","filePath":"Flutter/Dart网络编程.md"}'),t={name:"Flutter/Dart网络编程.md"},e=n(`<h1 id="dart网络编程" tabindex="-1">Dart网络编程 <a class="header-anchor" href="#dart网络编程" aria-label="Permalink to &quot;Dart网络编程&quot;">​</a></h1><h2 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h2><p>先编辑pubspec.yaml文件，添加dio库。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>dependencies:</span></span>
<span class="line"><span>    dio</span></span></code></pre></div><p>然后编写代码：</p><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Dio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dio  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Future</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dio.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://locolhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求文本&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((value){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;返回内容是\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="websocket" tabindex="-1">websocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;websocket&quot;">​</a></h2><p>这里使用socket_io-client库</p><p>参考这个教程：</p><p><a href="https://blog.csdn.net/github_36850997/article/details/131104260" target="_blank" rel="noreferrer">Flutter Socket.io框架的使用</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>socket = IO.io(&#39;http://localhost:3001&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>socket.connect();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>socket.emit(&#39;消息事件1&#39;, &#39;内容&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>socket.on(&#39;消息事件2&#39;, (msg) {</span></span>
<span class="line"><span>      print(msg);</span></span></code></pre></div>`,11),p=[e];function l(h,k,r,d,c,o){return i(),a("div",null,p)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
