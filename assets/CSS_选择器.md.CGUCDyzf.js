import{_ as l,c as i,o as e,a2 as o}from"./chunks/framework.84TDCN6B.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/选择器.md","filePath":"CSS/选择器.md"}'),d={name:"CSS/选择器.md"},c=o(`<h2 id="选择器汇总" tabindex="-1">选择器汇总 <a class="header-anchor" href="#选择器汇总" aria-label="Permalink to &quot;选择器汇总&quot;">​</a></h2><p>选择器的语法说明汇总如下：</p><ul><li><code>*</code> 选取所有元素</li><li><code>type</code> 选取指定类型的元素</li><li><code>.className</code> ： 选取包含class样式名的元素</li><li><code>#idName</code> ： 选择指定id值的元素</li><li><code>[attr]</code> ：选取定义了attr属性的元素</li><li><code>type[attr]</code> ：选取定义了attr属性的type类型的元素</li><li><code>[attr=&quot;val&quot;]</code> ：选取定义了attr属性,且值为val的元素</li><li><code>[attr^=&quot;val&quot;]</code> ：选取定义了attr属性,且值以val开头的元素</li><li><code>[attr$=&quot;val&quot;]</code> ： 选取定义了attr属性,且属性值以val结尾的元素</li><li><code>[attr*=&quot;val&quot;]</code> ：选取定义了attr属性,且属性值包含val的元素</li><li><code>[attr~=&quot;val&quot;]</code> ：选取定义了attr属性,且属性值包含多个值,而其中一个为val的元素</li><li><code>[attr|=&quot;val&quot;]</code> ：选取定义了attr属性,且值是以连字符分割的值,而第一个为val的元素</li><li><code>选择器 , 选择器</code> ： 逗号表示或的意思,选择匹配至少一个选择器的元素.</li><li><code>选择器1 选择器2</code> ： 空格表示后代，从匹配选择器1的后代中，选择匹配选择器2的元素。</li><li><code>选择器1 &gt; 选择器2</code> ： 尖括号表示子元素，从匹配选择器1的子元素中，选择匹配选择器2的元素。</li><li><code>选择器1 + 选择器2</code>： 加号表示紧跟其后，在匹配选择器1之后，紧跟其后匹配选择器2.</li><li><code>选择器1 ~ 选择器2</code>： 破浪号表示后面，在匹配选择器1之后，从后续元素匹配选择器2.</li><li><code>::first-line</code> ：选择块级元素文本的首行</li><li><code>::first-letter</code> ：选择块级元素文本的首字母。</li><li><code>:before</code> <code>:after</code>：在选取元素之前或之后插入内容</li><li><code>:root</code>：选取根元素</li><li><code>:first-child</code> ：选择第一个子元素</li><li><code>:last-child</code> ：选择最后一个子元素</li><li><code>:only-child</code> ：选择元素的唯一一个子元素</li><li><code>only-of-type</code>：选取属于父元素的特定类型的唯一子元素</li><li><code>nth-child(n)</code>： 选取父元素的第 n 个子元素。</li><li><code>:nth-last-child(n)</code>：选取父元素的倒数第n个子元素。</li><li><code>nth-of-type</code> ：选取属于父元素的特定类型的第n个子元素</li><li><code>nth-last-of-type(n)</code> ：选取属于父元素的特定类型的倒数第n个子元素</li><li><code>enabled</code> ：选取已启用的元素</li><li><code>disabled</code> ：选取被禁用的元素</li><li><code>checked</code> ：选取所有选中的复选框和单选按钮</li><li><code>default</code> ：选取默认元素</li><li><code>:valid</code> <code>:invalid</code>：选取基于输入验证判定的有效或者无效的input元素。</li><li><code>in-range</code> <code>out-of-range</code>： 选取被限定在指定范围之内或者之外的input元素。</li><li><code>required</code> <code>:optional</code> ：根据是否允许使用required属性选取input元素。</li><li><code>:link</code> ：选取未访问的链接元素</li><li><code>:visited</code> ：选取已访问的链接元素</li><li><code>:hover</code> ：选取鼠标指针悬停在其上面的元素</li><li><code>:active</code> ：选取当前用户激活的元素，这通常意味着用户即将点击该元素</li><li><code>:focus</code> ：选取获得焦点的元素</li><li><code>:not(选择器)</code> ：否定选择，选择不匹配选择器的元素。</li><li><code>:empty</code> ：选取不包含任何子元素或文本的元素</li><li><code>:lang(语言)</code> ：选取lang属性为指定值的元素</li><li><code>:target</code> ：选取URL片段标识符指向的元素。</li></ul><hr><ul><li>元素选择器 <ul><li>标签选择器</li><li>类选择器</li><li>ID选择器</li><li>通配选择器</li></ul></li><li>关系选择器 <ul><li>包含选择器</li><li>子选择器</li><li>相邻选择器</li><li>兄弟选择器</li><li>分组选择器</li></ul></li><li>属性选择器</li><li>伪类选择器 <ul><li>结构伪类</li><li>否定伪类</li><li>状态伪类</li><li>目标伪类</li><li>动态伪类</li></ul></li><li>伪对象选择器</li></ul><p>否定选择：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#div1:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.class1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>:nth-child(n) 第n个子元素</p><p>第一个 :nth-child(n)</p><p>第二个 :nth-child(n)</p><p>特别的 第一个 first-child，</p><p>最后一个 last-child</p><p>奇数</p><p>:nth-child(odd)</p><p>:nth-child(2n+1)</p><p>偶数</p><p>:nth-child(even)</p><p>:nth-child(2n)</p><p>推而广之，n从0开始算，可以使用四则运算构建一个等差数列，以方便选出元素</p><p>倒数第n个</p><p>nth-last-child(2)</p>`,21),t=[c];function a(s,n,p,r,h,u){return e(),i("div",null,t)}const k=l(d,[["render",a]]);export{v as __pageData,k as default};
