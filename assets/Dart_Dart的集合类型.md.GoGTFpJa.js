import{_ as i,c as s,o as a,a2 as l}from"./chunks/framework.84TDCN6B.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Dart/Dart的集合类型.md","filePath":"Dart/Dart的集合类型.md"}'),n={name:"Dart/Dart的集合类型.md"},t=l(`<p>dart集合主要有三种：</p><ul><li>List：通常称为数组，存储有序的可以重复的对象</li><li>Set：通常称为集合，存储无序且唯一的对象</li><li>Map：通常称为映射，以键值对形式存储，key是唯一的</li></ul><h2 id="list-数组类型" tabindex="-1">List 数组类型 <a class="header-anchor" href="#list-数组类型" aria-label="Permalink to &quot;List 数组类型&quot;">​</a></h2><p><strong>常用属性</strong></p><ul><li>length：获取长度</li><li>reversed：反序</li><li>isEmpty：判断是否为空</li><li>isNotEmpty：是否不为空</li></ul><p><strong>常用方法</strong></p><ul><li>add：增加元素</li><li>addAll：拼接数组</li><li>indexOf：返回元素索引，没有则返回-1</li><li>remove：根据值删除元素</li><li>removeAt：根据索引删除元素</li><li>insert(index,value)：根据索引插入元素</li><li>insertAll(index,list)：根据索引插入List</li><li>toList：其它类型转为List</li><li>join：按传入的字符拼接成字符串</li><li>split：将字符串按字符拆分成List</li><li>map(f)：将每个元素传入函数f，符合就返回true，否则返回false</li><li>where：将每个元素传入函数f，返回符合条件的新List</li></ul><p><strong>遍历</strong></p><p>遍历有三种方式：</p><ul><li>for循环</li><li>for in 循环</li><li>list.forEach方法</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((element){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="set-集合类型" tabindex="-1">Set 集合类型 <a class="header-anchor" href="#set-集合类型" aria-label="Permalink to &quot;Set 集合类型&quot;">​</a></h2><p><strong>常用属性</strong></p><ul><li>first/last： 第一个/最后一个元素</li><li>length：元素个数</li><li>isEmpty：是否为空</li><li>isNotEmpty：是否不为空</li><li>iterator：返回迭代器对象</li></ul><p><strong>常用方法</strong></p><ul><li>add：增加一个元素</li><li>addAll：拼接数组</li><li>toString：以字符串形式输出</li><li>join：拼接</li><li>contains：是否包含某个值</li><li>containsAll：传入数组，是否包含一些值</li><li>remove：删除值</li><li>removeAll：传入数组，删除一些值</li><li>clear：清除所有元素</li></ul><p><strong>遍历集合</strong></p><p>两种方式：</p><ul><li>for in</li><li>先使用toList转成数组，然后使用forEach</li></ul><h2 id="map映射类型" tabindex="-1">Map映射类型 <a class="header-anchor" href="#map映射类型" aria-label="Permalink to &quot;Map映射类型&quot;">​</a></h2><p>Map用来保存键值对。</p><p>如下代码创建一个map实例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Map dic1 = new Map.from({&#39;name&#39;,&#39;张三&#39;}) ;</span></span></code></pre></div><p>也可以加入泛型限制：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Map&lt;String,String&gt; dic2 = new Map.from ({&#39;name&#39;,&#39;张三&#39;}) ;</span></span></code></pre></div><p>使用键的名称修改和访问对应的值：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Map&lt;String,String&gt; dic2 = new Map.from ({&#39;name&#39;,&#39;张三&#39;}) ;</span></span>
<span class="line"><span>dic2[&#39;name&#39;] = &#39;李四&#39; ;</span></span>
<span class="line"><span>print(dic2[&#39;name&#39;]) ;</span></span></code></pre></div><p><strong>遍历map</strong></p><ul><li>使用forEach</li><li>for in，获取每个键</li></ul><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((key,value){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,30),p=[t];function e(h,k,r,d,o,E){return a(),s("div",null,p)}const y=i(n,[["render",e]]);export{c as __pageData,y as default};
