import{_ as a,c as e,o as t,a2 as s}from"./chunks/framework.84TDCN6B.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/管理分区与文件系统.md","filePath":"Linux/管理分区与文件系统.md"}'),i={name:"Linux/管理分区与文件系统.md"},n=s('<h2 id="设备名称" tabindex="-1">设备名称 <a class="header-anchor" href="#设备名称" aria-label="Permalink to &quot;设备名称&quot;">​</a></h2><p>在Linux中，硬盘一般命名为/dev/sda，如果有第二块，则继续命名为/dev/sdb。</p><p>分区一般在硬盘名称后加数字，例如/dev/sda1、/dev/sda2。</p><p>不过，对于Windows和Linux双系统而言，这种命名方式可能不适应，具体硬盘名称需要打开 /etc/fstab 查看。</p><h2 id="分区、挂载、挂载点的概念" tabindex="-1">分区、挂载、挂载点的概念 <a class="header-anchor" href="#分区、挂载、挂载点的概念" aria-label="Permalink to &quot;分区、挂载、挂载点的概念&quot;">​</a></h2><p>一块硬盘往往分为几个区，例如Windows的C盘、D盘、E盘，就是三个分区。</p><p>在Linux中，一个分区只有连接到文件系统中的某个目录才能使用这个分区，将硬盘的某个分区对应到Linux的某个目录称为“挂载”。</p><p>将U盘这个“特殊的分区”对应到某个目录（例如/mnt/sandisk）也称为“挂载”。</p><p>每个硬盘、每个分区都统一使用“设备”来称呼，每个硬盘、每个分区都使用一个设备名称来唯一标识。</p><p>关于分区、设备名称、挂载点的信息都记录在/etc/fstab文件中，该文件的每一行都表示一个分区及其挂载点，还包括分区容量等其它信息。</p><h2 id="分区表" tabindex="-1">分区表 <a class="header-anchor" href="#分区表" aria-label="Permalink to &quot;分区表&quot;">​</a></h2><p>分区表用来存储关于硬盘每个分区的大小和布局信息，有两种标准：</p><ul><li>传统的MBR，适用于古老的BIOS启动方式，MBR分区大小限制在了2TB。</li><li>新兴的GUID，gpt分区，适用于UEFI体系，取代BIOS。GUID分区可以支持高达9.4ZB的分区。</li></ul><p>由于fdisk并不支持gpt分区，所以使用parted命令。</p><h2 id="分区管理" tabindex="-1">分区管理 <a class="header-anchor" href="#分区管理" aria-label="Permalink to &quot;分区管理&quot;">​</a></h2><p>查看硬盘分区信息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>parted -l 硬盘名称</span></span></code></pre></div><h2 id="挂载" tabindex="-1">挂载 <a class="header-anchor" href="#挂载" aria-label="Permalink to &quot;挂载&quot;">​</a></h2><p><strong>自动挂载</strong></p><p>编辑/etc/fstab文件</p><p><strong>手动挂载</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>mount -t ext3 -o ro dev/sdb1 /mnt/tmp</span></span></code></pre></div>',22),p=[n];function o(d,r,l,c,h,_){return t(),e("div",null,p)}const m=a(i,[["render",o]]);export{b as __pageData,m as default};
