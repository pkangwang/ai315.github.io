import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/相等性判定.md","filePath":"JavaScript/相等性判定.md"}'),e={name:"JavaScript/相等性判定.md"},t=n(`<h2 id="原始值的相等判定" tabindex="-1">原始值的相等判定 <a class="header-anchor" href="#原始值的相等判定" aria-label="Permalink to &quot;原始值的相等判定&quot;">​</a></h2><p>JavaScript原始值的相等性判定有两种情况：严格相等、不严格相等。分别使用两个和三个等号。</p><p>这两种相等性判定的区别只有一个：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>是否进行类型转换</span></span></code></pre></div><p>用一个示例可以很好的进行说明：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ，进行了类型转换，true转换成了1，相等</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false 不进行类型转换</span></span></code></pre></div><h2 id="引用值的相等判定" tabindex="-1">引用值的相等判定 <a class="header-anchor" href="#引用值的相等判定" aria-label="Permalink to &quot;引用值的相等判定&quot;">​</a></h2><p>引用值的相等性判定不区分严格与否，两个和三个等号是等价的。引用值的相等判定只有一个依据：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>比较两个引用值的指针是否指向同一处</span></span></code></pre></div><p>例如，如下两个对象，虽然内容上看起来一样，但是它们实际的内容却存储在内存的不同地方，即指针的指向不一样，因此永远不会相等：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const objA = {name:&quot;bob&quot;}</span></span>
<span class="line"><span>const objB = {name:&quot;bob&quot;}</span></span>
<span class="line"><span>console.log(objA==objB)  // false </span></span>
<span class="line"><span>console.log(objA===objB)  // false</span></span></code></pre></div><p>由于对象使用等号拷贝值时，默认使用浅拷贝，即只拷贝指针，那么这两个对象的指针指向同一处，因此相等，如下示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const objC = {name:&quot;bob&quot;}</span></span>
<span class="line"><span>objD = objC // 此时只拷贝了指针</span></span>
<span class="line"><span>console.log(objC==objD)  // true</span></span>
<span class="line"><span>console.log(objC===objD) // true</span></span></code></pre></div>`,13),p=[t];function l(o,h,c,d,r,k){return i(),a("div",null,p)}const b=s(e,[["render",l]]);export{u as __pageData,b as default};
