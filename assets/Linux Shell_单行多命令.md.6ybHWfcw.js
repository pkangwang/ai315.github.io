import{_ as s,c as a,o as n,a2 as p}from"./chunks/framework.84TDCN6B.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/单行多命令.md","filePath":"Linux Shell/单行多命令.md"}'),e={name:"Linux Shell/单行多命令.md"},t=p(`<p><strong>命令的返回值</strong></p><p>既然两个命令有依赖性，而这个依赖性的判断地方就在于前一个命令执行的结果。在shell中，如果前一个命令成功执行或逻辑为真，则内置变量环境变量<code>$?</code>的值会设为0。如果执行有错误或逻辑为假，则<code>$?≠0</code>。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$  pwd # 成功执行</span></span>
<span class="line"><span>$  echo $?  # 输出0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$  ls 不存在的文件  # 执行错误</span></span>
<span class="line"><span>$  echo $?   # 输出2 不同的错误有不同的返回值</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$  [ 2 -eq 1 ]  # 不会输出内容，但是这个表达式逻辑值为假</span></span>
<span class="line"><span>$  echo $?  #  输出1 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>$  [ 2 -gt 1 ]  # 不会输出内容，但是这个表达式逻辑值为真</span></span>
<span class="line"><span>$  echo $?  # 输出0</span></span></code></pre></div><p><strong>单行多命令</strong></p><p>有些情况下，可以在一行中同时执行多个逻辑相关的命令，以提高效率。有三种情况；</p><ul><li>命令1 &amp;&amp; 命令2 ： 如果命令1成功执行或逻辑为真<code>（$?=0）</code>，则执行命令2。如果命令1执行发生错误或者逻辑为假<code>（$?≠0）</code>，则命令2不执行。</li><li>命令1 || 命令2 ： 如果命令1执行发生错误或者逻辑为假<code>（$?≠0）</code>，则命令2执行。如果命令1成功执行或者逻辑为真<code>（$?=0）</code>，则命令2不执行。</li><li>命令1 ; 命令2 ： 两个命令没有相关性，按顺序执行。其中一个命令的成功与否与逻辑真假都不影响其它的命令的执行。</li></ul><p>需要说明的是，这三种情况可以随意的组合搭配出自己的逻辑链条，例如比较使用的三元条件表达式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>expression  &amp;&amp; 条件为真时执行 || 条件为假时执行</span></span></code></pre></div><p>具体的示例如下，这个例子的意思是：如果file.txt存在，就查看其内容；如果不存在，就先新建。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ls file.txt  &amp;&amp; cat file.txt || touch file.txt</span></span></code></pre></div><p>再比如：如果目录不存在就新建目录，如果存在就读取文件列表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ls dir &amp;&amp; ls dir || mkdir dir</span></span></code></pre></div>`,12),l=[t];function i(c,o,d,h,r,_){return n(),a("div",null,l)}const m=s(e,[["render",i]]);export{g as __pageData,m as default};
