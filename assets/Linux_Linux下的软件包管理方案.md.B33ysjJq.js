import{_ as a,c as e,o as i,a2 as t}from"./chunks/framework.84TDCN6B.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/Linux下的软件包管理方案.md","filePath":"Linux/Linux下的软件包管理方案.md"}'),s={name:"Linux/Linux下的软件包管理方案.md"},n=t('<p>依赖，是软件包管理的永恒话题，无论是前端领域的npm依赖，还是Linux下的软件包依赖，都是令人比较头疼的问题，这种问题并不是多难的技术问题，而是代码的管理问题。</p><h2 id="原生包管理方案" tabindex="-1">原生包管理方案 <a class="header-anchor" href="#原生包管理方案" aria-label="Permalink to &quot;原生包管理方案&quot;">​</a></h2><p>以下是早期的两种知名包管理方案：</p><ul><li>debian：使用deb作为二进制格式，使用apt管理deb的依赖</li><li>Redhat：借鉴了debian的思想，使用rpm作为二进制格式，使用yum管理rpm的依赖。</li></ul><p>上述的方案我们统一称之为“原生包管理方案”，也就是说只能在少数几个发行版上运行。同时，上述两种方式最明显的问题就是依赖，主要包括：</p><ul><li>二进制文件之间的依赖。例如一个软件依赖于另一个软件，甚至是另一个软件的特定版本，如果依赖链条中的某个环节出了问题，那么本次安装就会出错。</li><li>对于本地库文件的依赖。本质上也跟第一点相同，如果本地缺少库文件、或者找不到正确的位置、或者版本不对应，安装就会出错。其实Windows上有时候也有这样的问题，例如偶尔会弹出“缺少某个.dll文件”。</li></ul><h2 id="跨发行版包管理方案" tabindex="-1">跨发行版包管理方案 <a class="header-anchor" href="#跨发行版包管理方案" aria-label="Permalink to &quot;跨发行版包管理方案&quot;">​</a></h2><p>从2016年左右开始，一些大的发行版厂商推出了新的包管理方式，就是尽量将需要的依赖文件都打包好，避免从外部或发行版本地寻找依赖文件，类似于Windows的msi格式。这样就减少了依赖，虽然这样打包后的体积增大，但是对于现代硬件存储成本来说已经不是问题了。这种格式称之为“跨发行版包管理方案”，也就是说不绑定发行版，直接面向Linux。</p><p>遵循这种思想的主要有.appimage格式、snap格式和flatpak格式。</p><ul><li>appimage格式有点像Windows上的“便携软件”，就是解压到/tmp目录下直接运行，这通常适用于即用即走、不依赖本地存储状态的情况。</li><li>snap格式是Ubuntu主导的，为每个snap提供一个隔离的沙箱环境，不过这种方式无法换源。</li><li>flatpak是由社区主导的一种Linux打包规范，其目标是“一次打包，到处运行”，让开发人员和用户能在不同Linux发行版之间共享应用程序。</li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><p>对应现行技术框架下的发行版，个人推荐的软件安装方案的优先顺序是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>跨发行版方案 &gt; 原生包管理方案 &gt; 下载二进制执行文件 &gt;&gt;下载源码手动编译</span></span></code></pre></div><p>而对于跨发行版方案，个人推荐的优先顺序是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>flatpak &gt; snap &gt; appimage</span></span></code></pre></div>',15),p=[n];function l(o,d,c,r,u,h){return i(),e("div",null,p)}const g=a(s,[["render",l]]);export{m as __pageData,g as default};
