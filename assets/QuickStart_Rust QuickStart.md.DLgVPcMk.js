import{_ as s,c as a,o as i,a2 as t}from"./chunks/framework.84TDCN6B.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"QuickStart/Rust QuickStart.md","filePath":"QuickStart/Rust QuickStart.md"}'),p={name:"QuickStart/Rust QuickStart.md"},n=t(`<h2 id="使用cargo" tabindex="-1">使用Cargo <a class="header-anchor" href="#使用cargo" aria-label="Permalink to &quot;使用Cargo&quot;">​</a></h2><p>一般用的自带 Cargo 来管理 Rust 项目：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 创建新项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xx</span></span></code></pre></div><p>接下来你可以在 src/main.rs 下写个 hello world</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    println!(&quot;Hello, world!&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行如下命令让你的项目运行起来：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$cargo build  # 构建项目</span></span>
<span class="line"><span>$cargo run # 运行项目</span></span></code></pre></div><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><p>如下定义一个变量，变量默认不可变，如果要可变，使用mut关键字：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let x = 5; // 不可变变量</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let mut y = 6; // 可变变量</span></span></code></pre></div><p>定义数组：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let arr:i32 = [1, 2, 3, 4, 5];</span></span></code></pre></div><p>定义函数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fn add(x: i32, y: i32) -&gt; i32 {</span></span>
<span class="line"><span>	x + y</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>i32是32位整数类型。</p><p>基本数据类型主要包括：</p><ul><li>整型： i8、u8、i32等</li><li>浮点型： f32</li><li>布尔型： u32</li><li>字符串类型：常用的是字符串引用类型&amp;str</li></ul><p>直接使用字符串字面量声明的类型，属于字符串引用类型——&amp;str。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><p>引用和所有权是Rust最最核心的知识点，掌握了引用和所有权，可以说Rust基本会了。</p><p>学过C和C++的肯定知道指针，指针表示内存中的地址。</p><p>引用是 Rust 中的一种安全指针。指针是 Rust 中的一种不安全指针。</p>`,23),e=[n];function l(h,c,o,d,r,k){return i(),a("div",null,e)}const v=s(p,[["render",l]]);export{g as __pageData,v as default};
