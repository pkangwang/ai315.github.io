import{_ as s,c as a,o as e,a2 as i}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Node.js/npm的使用.md","filePath":"Node.js/npm的使用.md"}'),p={name:"Node.js/npm的使用.md"},n=i(`<h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>npm默认随着node一起安装，无需单独安装。要检查npm是否已经安装，在终端中运行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm</span></span></code></pre></div><p>如果已安装，则会输出npm的帮助信息。</p><h2 id="更换镜像源" tabindex="-1">更换镜像源 <a class="header-anchor" href="#更换镜像源" aria-label="Permalink to &quot;更换镜像源&quot;">​</a></h2><p>运行如下命令更换为淘宝npm镜像源：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com/</span></span></code></pre></div><p>运行如下命令，如果输出新的镜像地址则表示镜像源更换成功：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span></span></code></pre></div><h2 id="脚本" tabindex="-1">脚本 <a class="header-anchor" href="#脚本" aria-label="Permalink to &quot;脚本&quot;">​</a></h2><p>通常，在项目根目录下，有一个package.json文件，文件中有<code>scripts</code>项，使用如下命令运行脚本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>npm run [script名称]</span></span></code></pre></div><p>在scripts之下，可以添加一个条目，条目的属性名为脚本名称，属性值为要运行的命令，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>&quot;hello&quot;:&quot;echo hello&quot;</span></span></code></pre></div><p>此时，运行<code>npm run hello</code>，命令行会执行<code>echo hello</code>。</p><p>有些比较大的npm包会自带二进制命令，如果是本地安装的（本地安装的意思是将文件下载到当前目录下），二进制命令会被放在<code>项目目录/node_modules/.bin</code>目录下，无需将该目录下的命令添加到系统PATH环境变量，直接使用如下命令运行二进制程序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>npx 二进制命令名称</span></span></code></pre></div><p>上述命令只能在二进制命令所在的项目目录内运行。如果是经常需要使用的命令，例如<code>vite</code>，那么更加建议全局安装，此时在任意目录内都可以运行。</p>`,18),t=[n];function l(o,c,h,d,r,g){return e(),a("div",null,t)}const m=s(p,[["render",l]]);export{u as __pageData,m as default};
