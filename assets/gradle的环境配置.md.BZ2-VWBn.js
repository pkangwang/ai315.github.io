import{_ as a,c as s,o as e,a2 as p}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"gradle的环境配置.md","filePath":"gradle的环境配置.md"}'),i={name:"gradle的环境配置.md"},l=p(`<h2 id="gradle基本知识" tabindex="-1">gradle基本知识 <a class="header-anchor" href="#gradle基本知识" aria-label="Permalink to &quot;gradle基本知识&quot;">​</a></h2><p>gradle是React Native和Flutter调试、构建安卓App的必需工具。gradle可以简单的类比为前端的webpack：通过一定的配置将源文件打包成目标平台可以运行的文件，webpack将源文件打包成HTML、CSS、JavaScript，而gradle将源文件打包成apk或aar（Android Assemble Bundle）。</p><p>React Native中的android项目的文件结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.gradle </span></span>
<span class="line"><span>app</span></span>
<span class="line"><span>gradle</span></span>
<span class="line"><span>	wrapper</span></span>
<span class="line"><span>		gradle-wrapper.jar</span></span>
<span class="line"><span>		gradle-wrapper.propertier</span></span>
<span class="line"><span>build.gradle</span></span>
<span class="line"><span>gradle.properties</span></span>
<span class="line"><span>gradlew</span></span>
<span class="line"><span>gradlew.bat</span></span>
<span class="line"><span>settings.gradle</span></span></code></pre></div><p>每个文件的含义如下：</p><ul><li>.gradle : gradle本地配置</li><li>app：apk的输出目录</li><li>gradle/wrapper/gradle-wrapper.propertier： gradle-wrapper的配置文件</li><li>gradle/wrapper/gradle-wrapper.jar： 与gradle-wrapper.propertier对应</li><li>build.gradle ： gradle项目的配置文件</li><li>gradle.properties：gradle项目的配置文件</li><li>gradlew：Linux、MacOS平台构建安卓app时运行的脚本</li><li>gradlew.bat： Windows平台构建安卓app时运行的脚本</li><li>settings.gradle： gradle项目的配置文件</li></ul><h2 id="gradle和gradle-wrapper的区别" tabindex="-1">gradle和gradle-wrapper的区别 <a class="header-anchor" href="#gradle和gradle-wrapper的区别" aria-label="Permalink to &quot;gradle和gradle-wrapper的区别&quot;">​</a></h2><p>gradle是一个全局、通用的构建工具，而gradle-wrapper是在局部（项目本地目录）使用的构建工具。</p><p>对于React Native或Flutter而言，并不需要使用gradle，直接运行gradlew.bat脚本即可，gradlew就是gradle-wrapper对应的脚本工具。</p><h2 id="在国内使用gradle-wrapper" tabindex="-1">在国内使用gradle-wrapper <a class="header-anchor" href="#在国内使用gradle-wrapper" aria-label="Permalink to &quot;在国内使用gradle-wrapper&quot;">​</a></h2><p>在React Native项目中，使用<code>.\\gradlew.bat assemble</code>命令为安卓构建apk文件时，需要从网络下载一些依赖，但是有些地址在国内是无法访问的，因此需要进行一些修改，实际上只需要改两个文件：</p><ul><li>项目/android/gradle/wrapper/gradle-wrapper.properties</li><li>项目/android/build.gradle</li></ul><p>下面依次说明怎么修改。</p><h2 id="gradle-wrapper-propertiries" tabindex="-1">gradle-wrapper.propertiries <a class="header-anchor" href="#gradle-wrapper-propertiries" aria-label="Permalink to &quot;gradle-wrapper.propertiries&quot;">​</a></h2><p>要修改的第一个文件的路径是：项目/android/gradle/wrapper/gradle-wrapper.properties，只需要修改distributionUrl的那一行，把后面的链接改成国内阿里云的，文件是gradle-8.6-all.zip，注意版本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>distributionBase=GRADLE_USER_HOME</span></span>
<span class="line"><span>distributionPath=wrapper/dists</span></span>
<span class="line"><span>distributionUrl=https://mirrors.aliyun.com/macports/distfiles/gradle/gradle-8.6-all.zip</span></span>
<span class="line"><span>networkTimeout=10000</span></span>
<span class="line"><span>validateDistributionUrl=true</span></span>
<span class="line"><span>zipStoreBase=GRADLE_USER_HOME</span></span>
<span class="line"><span>zipStorePath=wrapper/dists</span></span></code></pre></div><p>这个文件只需要改gradle下载链接的那一行即可，其它保持默认，不要修改。</p><p>这里在补充说明一下每一行的含义：</p><ul><li>distributionBase ： gradle工具放置的根目录。GRADLE_USER_HOME的值为<code>C:\\Users\\用户名\\.gradle</code>，保持默认，不要修改。</li><li>distributionPath ：gradle工具放置的路径，与上面的根目录组合就是gradle放置的位置。</li><li>zipStoreBase和zipStorePath ： gradle工具需要一些第三方的插件，该值表示插件放置的目录，可以看到与grale工具放在同一个目录下。</li></ul><h2 id="build-gradle" tabindex="-1">build.gradle <a class="header-anchor" href="#build-gradle" aria-label="Permalink to &quot;build.gradle&quot;">​</a></h2><p>要修改的第二个文件的路径是：项目/android/build.gradle。</p><p>这里面的repositories部分定义了gradle应该去哪里下载第三方插件，默认内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>repositories {</span></span>
<span class="line"><span>        google()</span></span>
<span class="line"><span>        mavenCentral()</span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>这两个仓库需要使用稳定的网络代理工具才能访问到，但是不能删除，因为笔者经过测试，有些插件的有些版本国内的镜像仓库并没有，必须要去这里下载，因此在第一次构建时需要使用代理工具。</p><p>大部分第三方插件可以通过国内的镜像仓库下载，在后面添加三个仓库，修改后的内容是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>repositories {</span></span>
<span class="line"><span>        google()</span></span>
<span class="line"><span>        mavenCentral()</span></span>
<span class="line"><span>        maven { url &#39;https://maven.aliyun.com/repository/google&#39; }</span></span>
<span class="line"><span>        maven { url &#39;https://maven.aliyun.com/repository/jcenter&#39; }</span></span>
<span class="line"><span>        maven { url &#39;https://maven.aliyun.com/nexus/content/groups/public&#39; }</span></span>
<span class="line"><span>    }</span></span></code></pre></div><h2 id="构建安卓app" tabindex="-1">构建安卓App <a class="header-anchor" href="#构建安卓app" aria-label="Permalink to &quot;构建安卓App&quot;">​</a></h2><p>这里，我们先不管USB调试这些，先把apk文件生成出来，只有apk生成出来了，项目才算跑通。因为这中间有很多细节需要注意：各种工具的版本、代理网络环境等等，非常需要耐心。</p><p>第一步，运行如下命令生成安卓项目：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span></span></code></pre></div><p>这会将React组件编译成安卓原生组件，会尝试在安卓模拟器或真机上安装调试。由于我们没有使用模拟器和真机，因此会报错，我们先不管它，只要生成安卓项目即可。</p><p>第二步，进入android项目中：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> android</span></span></code></pre></div><p>第三步，开始构建。这一步有两个前提：一是已经修改好了gradle-wrapper.propertiries和build.gradle，二是需要开启一个网络代理工具。运行如下命令开始构建：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\gradlew.bat </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">assemble</span></span></code></pre></div><p>实际上gradlew.bat 还有很多其它子命令，表示不同的任务，使用如下命令查看：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\gradlew.bat </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tasks</span></span></code></pre></div><p>运行<code>.\\gradlew.bat assemble</code>后等待下载gradle工具及大量的第三方插件即可，这个过程非常漫长——可能长达数个小时，中间可能会有各种错误。</p><p>最终会输出包含如下语句的信息表示构建成功：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BUILD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SUCCESSFUL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 46</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">89</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> actionable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tasks:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executed,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 87</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up-to-date</span></span></code></pre></div><p>此时，app-release.apk文件在android/app/build/outputs/apk/release文件夹下，拷贝到手机安装即可。不过，由于app没有签名，会提示不能直接安装，忽略风险继续安装即可。</p>`,41),n=[l];function r(t,d,o,h,g,c){return e(),s("div",null,n)}const b=a(i,[["render",r]]);export{u as __pageData,b as default};
