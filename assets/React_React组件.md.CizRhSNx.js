import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.84TDCN6B.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"React/React组件.md","filePath":"React/React组件.md"}'),l={name:"React/React组件.md"},e=t(`<p>废话少说，重要的事情说三遍，React 组件是什么？</p><ul><li>React 组件是 <em>返回标签</em> 的 <em>JavaScript 函数</em></li><li>React 组件是 <em>返回标签</em> 的 <em>JavaScript 函数</em></li><li>React 组件是 <em>返回标签</em> 的 <em>JavaScript 函数</em></li></ul><p>这句话应该背下来，是React组件最精简准确的定义。牢牢记住两个关键词：</p><ul><li>第一，返回标签</li><li>第二，JavaScript 函数</li></ul><p>也可以用类来定义组件，这类组件被称为类组件。不过，自React Hooks推出后，React官方推荐只使用函数组件，类组件将来可能会被弃用。</p><p>可以将应用程序的UI界面拆分成独立可复用的代码片段，即组件，并对每个组件进行开发。组件名称必须以大写字母开头。React会将以小写字母开头的组件视为原生DOM标签。例如，<code>&lt;div/&gt;</code>代表HTML标签div，而<code>&lt;Welcome/&gt;</code>则代表组件Welcome。</p><p>组件从概念上类似与JavaScript函数。它接收任意的入参（props），并返回用于描述页面显示内容的React元素。React元素可以是DOM标签（元素），也可以是用户自定义的组件。当React元素为用户自定义组件时，它会将JSX所接收的属性以及子组件转换为单个对象传递给组件，这个对象被称为props。</p><p>定义组件最简单的方式就是编写JavaScript函数，这类组件被称为函数组件。</p><p>组件既可以在同一个文件内定义，也可以使用import引入，因为组件是函数，所以导入导出组件遵循导入导出函数的规则。</p><p>例如：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello,World!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;)</span></span></code></pre></div><p>接收参数props：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello,{props.name} !&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Welcome</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;)</span></span></code></pre></div><p>组件和组件实例的区别</p><ul><li>函数是一个组件，应该返回一个DOM结构</li><li>通过使用尖括号包裹组件名创建一个组件实例</li><li>组件实例是一个变量，在传递给render函数的参数的定义中，应该使用花括号将该变量包裹</li></ul><p>大致步骤为：</p><ol><li>声明要挂载的div节点</li><li>声明要用到的变量</li><li>定义函数组件</li><li>声明组件实例化的变量。也可以暂时不实例化</li><li>指定要渲染的内容，在其中使用组件实例。也可以在这里直接实例化。</li><li>渲染</li></ol><p>组件可以在其输出中引用其它组件，于是，可以用同一组件与其他组件组合来抽象出任意层次的细节。</p>`,18),p=[e];function n(h,k,c,r,d,E){return a(),i("div",null,p)}const y=s(l,[["render",n]]);export{g as __pageData,y as default};
