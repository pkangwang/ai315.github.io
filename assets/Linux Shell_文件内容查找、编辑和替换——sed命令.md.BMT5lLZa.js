import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/文件内容查找、编辑和替换——sed命令.md","filePath":"Linux Shell/文件内容查找、编辑和替换——sed命令.md"}'),t={name:"Linux Shell/文件内容查找、编辑和替换——sed命令.md"},l=e('<h2 id="sed命令语法" tabindex="-1">sed命令语法 <a class="header-anchor" href="#sed命令语法" aria-label="Permalink to &quot;sed命令语法&quot;">​</a></h2><p>sed命令语法如下：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  选项</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;[处理范围][操作指令]&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  文件名</span></span></code></pre></div><p>中括号只是区分处理范围和操作，使用时不要输入。</p><p>常见的选项如下：</p><ul><li>-n : 只打印被处理过的行，默认是处理后的结果，经常与p搭配。</li><li>-i : 直接修改原文件，而不是输出到屏幕上</li><li>-e &#39;script&#39; 指定多个script，完成多个操作</li><li>-r 支持扩展正则表达式</li></ul><p>需要重点提醒的是，默认情况下，会将待处理的文件内容拷贝到缓存中，处理之后输出到屏幕上，此时无论是删除，还是查找替换，都对源文件的内容没有任何影响。-i 选项直接修改原文件，而不在屏幕上输出。这种无损操作可以提前测试查找替换的结果，避免产生不可逆的修改。所以，最佳的实践方案是分两步走：</p><ol><li>不加-i查看输出结果是否是自己想要的</li><li>确定后加-i修改原文件</li></ol><h2 id="处理范围" tabindex="-1">处理范围 <a class="header-anchor" href="#处理范围" aria-label="Permalink to &quot;处理范围&quot;">​</a></h2><p>处理范围表示要限定部分行的操作，不写表示全部行等待操作。有两种方式限制处理范围：</p><ul><li>指定行号范围</li><li>查找</li></ul><p>指定行号范围有几种方式：</p><ul><li>不写或1,$ 全文处理，美元符$表示最后一行</li><li>1,10 第1行到第10行</li><li><code>5,$</code> 第5行到最后一行</li><li>5 只有第5行</li><li>2,+5 从第2行开始往后的5行</li><li>n~m 从第n行开始，每次步进m行</li><li>1~2 从第1行开始，每2行，也就是奇数行</li><li>2~2 从第2航空开始，每2行，也就是偶数行</li></ul><p>通过查找方式限制处理行的语法是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/pattern/</span></span></code></pre></div><h2 id="操作指令汇总" tabindex="-1">操作指令汇总 <a class="header-anchor" href="#操作指令汇总" aria-label="Permalink to &quot;操作指令汇总&quot;">​</a></h2><p>操作指令分为</p><ul><li>p 打印 print，表示将处理范围打印出来</li><li>d 删除delete，表示将处理范围删除</li><li>a 追加append</li><li>c 替换change</li><li>i 插入insert</li></ul><h2 id="打印——p" tabindex="-1">打印——p <a class="header-anchor" href="#打印——p" aria-label="Permalink to &quot;打印——p&quot;">​</a></h2><p>打印操作符是p，为了只打印需要的行，需要加上-n选项，否则会重复输出需要的行。</p><p>例如，打印前5行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1,5p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><p>打印所有行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 打印所有行</span></span></code></pre></div><p>打印包含“word”文本的行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/word/p&#39;</span></span></code></pre></div><p>打印前5行中包含“word”文本的行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1,5/word/p&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><h2 id="删除——d" tabindex="-1">删除——d <a class="header-anchor" href="#删除——d" aria-label="Permalink to &quot;删除——d&quot;">​</a></h2><p>删除的操作符是d，在匹配到行之后，使用如下操作删除：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;1,3d&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  file.txt</span></span></code></pre></div><p>这行命令删除了前3行。</p><p>或者使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/text/d&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  file.txt</span></span></code></pre></div><p>这行命令将包含有“text”文本的行删除。</p><h2 id="追加、插入和整行替换" tabindex="-1">追加、插入和整行替换 <a class="header-anchor" href="#追加、插入和整行替换" aria-label="Permalink to &quot;追加、插入和整行替换&quot;">​</a></h2><p>基于整行的追加、插入、替换的指令分别是：</p><ul><li>a append追加</li><li>i insert，插入</li><li>c 替换 change</li></ul><p>例如，要在第一行前面加入新文本内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;1i new text&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><p>要在最后一行后面添加新内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;$a  new text&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><p>这里$表示最后一行。</p><p>而要将第3行整行换成新内容，运行：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;3c   new text&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  file.txt</span></span></code></pre></div><p>注意，由于后面的文本中出现了空格，故而上面这三个操作都是需要添加引号的，否则会被识别为命令行参数。</p><h2 id="查找和替换" tabindex="-1">查找和替换 <a class="header-anchor" href="#查找和替换" aria-label="Permalink to &quot;查找和替换&quot;">​</a></h2><p>查找和替换是sed最常见的操作。其语法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sed  选项  &#39;处理范围s/old/new/查找替换选项&#39;  文件名</span></span></code></pre></div><p>处理范围同前面的讲解，这里不再赘述。</p><p>查找替换选项包括：</p><ul><li>g表示全局替换，不加g只替换每行找到的第一个</li><li>i表示大小写不敏感查找</li></ul><p>下面这行命令将所有old文本替换成new文本：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/old/new/g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><p>下面这行命令将前5行的old文本替换成new文本，且忽略大小写：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1,5s/old/new/gi&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span></span></code></pre></div><p>值得提醒的的是，一般情况下使用 <code>s/旧文本/新文本/g</code> 进行替换，但这里的<code>/</code>可以换成其它字符，如果遇到文本中本来就包含<code>/</code>的情况，可以使用转义符号<code>\\</code>转义，不过更加建议更换成其它字符，比如<code>#</code>。</p><p>一个常见的示例是对网址的替换，我们都知道，网址中是包含斜杠的，此时有两种方式处理：</p><ul><li>在每个斜杠前加转义字符，即反斜杠<code>\\</code></li><li>将分隔符指定为其它字符，例如@。显然这种方式更方便。</li></ul><p>例如，更换apt包管理器的软件仓库地址，以提升下载速度，而仓库地址包含<code>/</code>字符，此时，就可以使用：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;s@http://archive.ubuntu.com/ubuntu/@https://mirrors.aliyun.com/ubuntu/@g&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /etc/apt/sources.list</span></span></code></pre></div><p>这里我们使用了@进行分隔。注意加<code>-i</code> 将修改应用到源文件。</p>',62),p=[l];function h(n,d,o,c,k,r){return a(),i("div",null,p)}const F=s(t,[["render",h]]);export{u as __pageData,F as default};
