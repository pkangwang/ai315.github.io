import{_ as s,c as a,o as n,a2 as e}from"./chunks/framework.84TDCN6B.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/oh-my-zsh.md","filePath":"Linux/oh-my-zsh.md"}'),p={name:"Linux/oh-my-zsh.md"},t=e(`<h2 id="安装oh-my-zsh" tabindex="-1">安装oh-my-zsh <a class="header-anchor" href="#安装oh-my-zsh" aria-label="Permalink to &quot;安装oh-my-zsh&quot;">​</a></h2><p>使用如下一行命令安装ohmyzsh。本质上是先获取安装脚本，然后执行脚本安装。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></span></code></pre></div><p>针对国内用户，如果上述方式网络不佳，使用如下方式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sh -c &quot;$(curl -fsSL https://install.ohmyz.sh)</span></span></code></pre></div><h2 id="内置变量和目录约定" tabindex="-1">内置变量和目录约定 <a class="header-anchor" href="#内置变量和目录约定" aria-label="Permalink to &quot;内置变量和目录约定&quot;">​</a></h2><p>ohmyzsh分为内置插件、内置主题、第三方插件、第三方主题。</p><p>ohmyzsh的配置文件在~/.zshrc。安装目录在~/.oh-my-zsh。</p><p>为了便于重复使用，定义了如下两个环境变量，推荐先检查一下有没有定义：</p><ul><li>ZSH ： ~/.oh-my-zsh</li><li>ZSH_CUSTOM： $ZSH/custom</li></ul><p>几个位置：</p><ul><li>内置插件：$ZSH/plugins</li><li>内置主题：$ZSH/themes</li><li>第三方插件：$ZSH_CUSTOM/plugins</li><li>第三方主题：$ZSH_CUSTOM/thems</li></ul><p><img src="https://pic2.zhimg.com/80/v2-f2459e9598a567df3fa36a8eff964265_1440w.webp" alt="目录约定"></p><h2 id="使用ohmyzsh的方式管理插件" tabindex="-1">使用ohmyzsh的方式管理插件 <a class="header-anchor" href="#使用ohmyzsh的方式管理插件" aria-label="Permalink to &quot;使用ohmyzsh的方式管理插件&quot;">​</a></h2><p>在$ZSH/plugins或$ZSH_CUSTOM/plugins下面，每个目录的名称就是插件的名称，下面有个同名的.plugin.zsh文件，因此目录结构是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>.../plugins/</span></span>
<span class="line"><span>     autojump/</span></span>
<span class="line"><span>        autojump.plugin.zsh</span></span>
<span class="line"><span>        ...</span></span></code></pre></div><p>在~/.zshrc中，修改plugins数组：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>plugins=(rails git ruby autojump)</span></span></code></pre></div><p>内置插件名称见 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noreferrer">https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</a></p><p>如果在$ZSH/plugins和$ZSH_CUSTOM/plugins存在同名插件，优先使用ZSH_CUSTOM。</p><h2 id="使用zsh的方式管理插件" tabindex="-1">使用zsh的方式管理插件 <a class="header-anchor" href="#使用zsh的方式管理插件" aria-label="Permalink to &quot;使用zsh的方式管理插件&quot;">​</a></h2><p>ohmyzsh不是必装的，有的插件并没有为ohmyzsh设计，也就是说没有<code>插件名.plugin.zsh</code>入口文件。此时，先下载插件到指定目录，然后在zshrc添加一行source插件的入口脚本，重启zsh即可。</p><h2 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h2><p>在themes目录下，每个主题以.zsh-theme为后缀，前面的就是主题的名字，如 agnoster.zsh-theme。</p><p>如下是自带主题列表：</p><p><img src="https://pic3.zhimg.com/80/v2-8581fd2ee5c54625ca112f0377f382f2_1440w.webp" alt="主题"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ZSH_CUSTOM</span></span>
<span class="line"><span>└── themes</span></span>
<span class="line"><span>    └── my_awesome_theme.zsh-theme</span></span></code></pre></div><p><img src="https://user-images.githubusercontent.com/49100982/108254745-777cb400-716c-11eb-800a-a8cfa612253f.jpg" alt="anoster"></p><p>然后在~/.zshrc文件里面中，修改ZSH_THEMES的变量值，指向文件名称（不带.zsh-theme后缀）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>- ZSH_THEME=&quot;my_awesome_theme&quot;</span></span></code></pre></div><p>如果不想设置任何主题，则保留变量名为空：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ZSH_THEME=&quot;&quot;</span></span></code></pre></div><p>每种主题的预览效果见 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes" target="_blank" rel="noreferrer">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p><p>如果在$ZSH和$ZSH_CUSTOM存在同名主题，优先使用$ZSH_CUSTOM。</p><h2 id="自定义脚本" tabindex="-1">自定义脚本 <a class="header-anchor" href="#自定义脚本" aria-label="Permalink to &quot;自定义脚本&quot;">​</a></h2><p>在$ZSH_CUSTOM下面一个或多个新建.zsh文件或房子子目录里面，zsh每次启动时都会执行这些脚本。</p><h2 id="incr-实时补全" tabindex="-1">incr_实时补全 <a class="header-anchor" href="#incr-实时补全" aria-label="Permalink to &quot;incr_实时补全&quot;">​</a></h2><p>incr incr是一款自动提示插件，功能非常强大，官网演示demo，感受一下：</p><p><img src="https://pic1.zhimg.com/v2-a9a9cc115d4fc56dce323fd3db1e1128_b.gif?consumer=ZHI_MENG" alt="incr"></p><p>去这里 <a href="http://mimosa-pudica.net/src/incr-0.2.zsh" target="_blank" rel="noreferrer">http://mimosa-pudica.net/src/incr-0.2.zsh</a> 下载文件，放到plugins的incr目录下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>##创建文件夹</span></span>
<span class="line"><span>mkdir $ZSH_CUSTOM/plugins/incr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##下载</span></span>
<span class="line"><span>curl -fsSL https://mimosa-pudica.net/src/incr-0.2.zsh -o $ZSH_CUSTOM/plugins/incr/incr.zsh</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##配置</span></span>
<span class="line"><span>echo &#39;source $ZSH_CUSTOM/plugins/incr/incr.zsh&#39; &gt;&gt; ~/.zshrc</span></span>
<span class="line"><span></span></span>
<span class="line"><span>##激活</span></span>
<span class="line"><span>source ~/.zshrc</span></span></code></pre></div><h2 id="autojump" tabindex="-1">autojump <a class="header-anchor" href="#autojump" aria-label="Permalink to &quot;autojump&quot;">​</a></h2><p>autojump这款插件基本上算是必备插件了，在终端操作里面比较常用的算是文件夹之间的切换，这款插件极大地简化了路径跳转的操作</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>yum install autojump-zsh</span></span>
<span class="line"><span>chmod 777 /usr/share/autojump/autojump.bash</span></span>
<span class="line"><span>echo &quot;/usr/share/autojump/autojump.bash&quot; &gt;&gt; ~/.zshrc</span></span>
<span class="line"><span>source ~/.zshrc</span></span></code></pre></div><p><img src="https://pic1.zhimg.com/v2-fffd39bdd01464f8df7ad17fa6c7ada0_b.gif?consumer=ZHI_MENG" alt="autojump"></p><p>以前的cd code现在可以直接j c，路径越长，该插件效果就越明显</p><h2 id="zsh-autosuggestions-历史补全" tabindex="-1">zsh-autosuggestions：历史补全 <a class="header-anchor" href="#zsh-autosuggestions-历史补全" aria-label="Permalink to &quot;zsh-autosuggestions：历史补全&quot;">​</a></h2><p>这是一个命令自动补全插件，当你输入命令的几个字母，它会自动根据历史输入进行自动补全，然后按→，安装也很简单：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span></span>
<span class="line"><span>vim ~/.zshrc</span></span>
<span class="line"><span># 加入插件列表</span></span>
<span class="line"><span>plugins=(</span></span>
<span class="line"><span>  git</span></span>
<span class="line"><span>  zsh-autosuggestions</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>source ~/.zshrc</span></span></code></pre></div><p><img src="https://pic4.zhimg.com/v2-8195a9fb188ff4e892a7bba1d178890b_b.gif" alt="自动补全"></p><h2 id="语法检查zsh-syntax-highlighting" tabindex="-1">语法检查zsh-syntax-highlighting <a class="header-anchor" href="#语法检查zsh-syntax-highlighting" aria-label="Permalink to &quot;语法检查zsh-syntax-highlighting&quot;">​</a></h2><p>平时我们输入Linux命令的时候，只有在执行的时候才知道输错命令了，这款插件可以实时检测命令是否出错。命令错误显示红色，直至正确才为绿色，路径正确会添加下划线。</p><p>新版本的插件使用脚本形式（.zsh）而不是插件形式（.plugin.zsh），因此不是修改plugins数组了，而是在结尾添加source命令。</p><p>下载到指定目录：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span></span></code></pre></div><p>修改.zshrc：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>echo  &quot;source  zsh-syntax-highlighting.zsh的路径&quot;  &gt;&gt; ~/.zshrc</span></span></code></pre></div><h2 id="zsh-history-substring-search-历史记录关键字匹配" tabindex="-1">zsh-history-substring-search 历史记录关键字匹配 <a class="header-anchor" href="#zsh-history-substring-search-历史记录关键字匹配" aria-label="Permalink to &quot;zsh-history-substring-search 历史记录关键字匹配&quot;">​</a></h2><p><a href="https://github.com/zsh-users/zsh-history-substring-search/" target="_blank" rel="noreferrer">https://github.com/zsh-users/zsh-history-substring-search/</a></p>`,59),i=[t];function h(l,o,c,r,u,g){return n(),a("div",null,i)}const b=s(p,[["render",h]]);export{m as __pageData,b as default};
