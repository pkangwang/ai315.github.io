import{_ as a,c as s,o as i,a2 as e}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/获取用户输入——read命令.md","filePath":"Linux Shell/获取用户输入——read命令.md"}'),t={name:"Linux Shell/获取用户输入——read命令.md"},n=e(`<p>Linux read命令用于从标准输入读取值。</p><p>read命令选项如下：</p><ul><li>-p | 后面跟提示信息，即在输入前打印提示信息。</li><li>-n | 后跟一个数字，定义输入文本的长度</li><li>-a | 后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。</li><li>-s | 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>-p 参数很常用，允许在 read 命令行中直接指定一个提示。例如：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your name:&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “你的名字是：</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>上面的示例运行后，在终端会看到提示字符“your name：”，此时输入一个字符串后按回车，即可将该字符串赋予给变量name。然后打印出name变量。</p>`,7),l=[n];function p(h,r,o,d,_,c){return i(),s("div",null,l)}const m=a(t,[["render",p]]);export{u as __pageData,m as default};
