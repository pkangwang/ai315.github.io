import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.84TDCN6B.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Java/集合数据类型.md","filePath":"Java/集合数据类型.md"}'),p={name:"Java/集合数据类型.md"},t=n(`<p>集合类型主要包括：</p><ul><li>数组：固定长度，按照索引取元素值；</li><li>ArrayList：不定长度，可以随时添加删除元素；</li><li>HashMap：映射类型。</li></ul><p><strong>数组类型</strong></p><p>数组类型变量使用一个基类型后面跟一个空的中括号[]表示，也可以使用C风格声明，把中括号放在数组名后面。数组名和中括号之间的空格可有可没有。例如下面几种写法都是等价的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int[]  arr1;</span></span>
<span class="line"><span>int []  arr1;</span></span>
<span class="line"><span>int arr1[];</span></span>
<span class="line"><span>int arr1 [];</span></span></code></pre></div><p>可在声明时就填入元素：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int[]  arr1 = {1,2,3,4,5} ;</span></span></code></pre></div><p>使用length属性访问数组的长度：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>int[]  arr1 = {1,2,3,4,5} ;</span></span>
<span class="line"><span>System.out.println(arr1.length);</span></span></code></pre></div><p><strong>泛型</strong></p><p>在集合数据类型中，如果要保证明确的元素的数据类型，就可以使用泛型。</p><p>泛型的语法为在集合类型变量名称后面紧跟着一对尖括号，尖括号中指明元素的类型。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ArrayList&lt;String&gt; strs = new ArrayList&lt;String&gt;();</span></span></code></pre></div><p>作为最佳实践，推荐在声明集合类型时总是使用泛型。</p><p><strong>ArrayList</strong></p><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是<strong>没有固定大小的限制</strong>，我们可以添加或删除元素。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ArrayList&lt;String&gt; strs = new ArrayList&lt;String&gt;();</span></span>
<span class="line"><span>sites.add(&quot;hello&quot;);</span></span>
<span class="line"><span>sites.add(&quot;World&quot;);</span></span>
<span class="line"><span>sites.add(&quot;Java&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>System.out.println(sites);  </span></span>
<span class="line"><span>// [hello, World, Java]</span></span></code></pre></div><p><strong>HashMap</strong></p><p>HashMap表示映射数据类型，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HashMap&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;苹果&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;橘子&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;香蕉&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{苹果=5.0, 橘子=1.5, 香蕉=2.5}</span></span></code></pre></div><p>如果传入了相同的键名给put()方法，则后面的值会覆盖前面的。</p>`,23),l=[t];function e(h,r,k,d,o,g){return i(),a("div",null,l)}const u=s(p,[["render",e]]);export{E as __pageData,u as default};
