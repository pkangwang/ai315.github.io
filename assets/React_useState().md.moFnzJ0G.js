import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.84TDCN6B.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"React/useState().md","filePath":"React/useState().md"}'),e={name:"React/useState().md"},n=t(`<p>Hook（钩子）是从React16.8开始新增加的特性。Hook是一些可以在函数组件里钩入props、state、context、ref及生命周期等特性的函数。不能在类组件中使用Hook。Hook中的数据发生变化后，Hook会使用新数据重新渲染所在的组件。</p><p>React应用开发时，是否使用Hook是可选的，无须重写任何已有代码就可以在一些组件中使用Hook，而且hook是向后兼容的。</p><p>useState()函数返回一个state并更新state。在初始渲染期间，返回的state与传入的第一个参数（initialState）值相同。在后续渲染中，useState()函数返回的第一个值将始终是更新后的最新的state。与setState()方法不同，useState()函数不会自动合并对象。</p><p>useState()函数声明一个新的state变量，函数里面唯一的参数就是初始state。可以按照需要使用数字或字符串进行赋值，而不一定是对象。如果要在state中存储两个不同的变量，只需要调用useState()函数两次即可。</p><p>useState()是一种在函数调用时保存变量的方式。state中的变量会保留。useState()向命名的变量返回一对值：</p><ul><li>state变量</li><li>更新该变量的函数</li></ul><p>返回值为当前state及更新state的函数。react会重新渲染组件，并把最新的state传给它。</p><p>电定义多个state变量：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">books</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setBooks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JavaScript高级程序设计&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;JavaScript权威指南&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h2 id="单击响应" tabindex="-1">单击响应 <a class="header-anchor" href="#单击响应" aria-label="Permalink to &quot;单击响应&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>const [greeting, setGreeting] = useState(&#39;hello&#39;); // greeting 默认 hello</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 点击greeting变为Hello1</span></span>
<span class="line"><span>&lt;div onClick={setGreeting(&#39;Hello1&#39;)}&gt;{greeting}&lt;/div&gt;</span></span></code></pre></div>`,11),p=[n];function h(l,k,E,r,d,o){return a(),i("div",null,p)}const y=s(e,[["render",h]]);export{c as __pageData,y as default};
