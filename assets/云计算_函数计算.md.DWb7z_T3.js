import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.84TDCN6B.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"云计算/函数计算.md","filePath":"云计算/函数计算.md"}'),t={name:"云计算/函数计算.md"},h=n(`<p><strong>函数</strong>是各种函数计算云服务配置、运行的基本单位，这里的函数不同于编程语言中的函数，这里的函数是一组资源的集合，包括：</p><ul><li>一个或多个源代码文件，也叫请求处理程序</li><li>触发器配置</li><li>自定义域名配置</li><li>其它自定义配置</li></ul><h2 id="触发器" tabindex="-1">触发器 <a class="header-anchor" href="#触发器" aria-label="Permalink to &quot;触发器&quot;">​</a></h2><p>一个函数可以配置一个或多个触发器，触发器主要包括两种：</p><ul><li>事件触发器：例如关联的某个对象存储桶中新增了一个文件后触发</li><li>HTTP触发器 ： 当用户请求触发器链接时触发，这种触发器更常用。</li></ul><p>一个触发器加上一个请求处理程序就组成了一个可以提供服务的函数。</p><h2 id="函数处理程序" tabindex="-1">函数处理程序 <a class="header-anchor" href="#函数处理程序" aria-label="Permalink to &quot;函数处理程序&quot;">​</a></h2><p>一个触发器对应一个请求处理程序handler。handler包括一个文件名和方法名。</p><p>对于Python而言，请求处理程序格式为<code>文件名.方法名</code>，例如文件名是main.py，方法名为handler，那么请求处理程序为main.handler。</p><p>对于Node.js而言，请求处理程序为<code>文件名.方法名</code>，例如文件名是index.js，方法名为handler，那么请求处理程序为 index.handler。</p><h2 id="编写函数之前需要考虑的因素" tabindex="-1">编写函数之前需要考虑的因素 <a class="header-anchor" href="#编写函数之前需要考虑的因素" aria-label="Permalink to &quot;编写函数之前需要考虑的因素&quot;">​</a></h2><p>对于HTTP函数计算，编写之前需要考虑：</p><ul><li>用户请求信息是怎样的，包括请求方法、请求头、路径、body</li><li>根据请求信息应该返回怎样的结果，包括响应码、响应头、响应体。</li><li>是否需要提取上下文信息。</li></ul><p>总而言之，始终记住三个关键词：请求、响应、上下文。所有的云厂商的函数计算服务都是围绕这三点提供服务的。</p><h2 id="阿里云python函数计算" tabindex="-1">阿里云Python函数计算 <a class="header-anchor" href="#阿里云python函数计算" aria-label="Permalink to &quot;阿里云Python函数计算&quot;">​</a></h2><p>使用HTTP请求处理程序前，请确保已经为函数配置<strong>HTTP触发器</strong>。</p><p>一个简单的HTTP处理函数示例如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, context):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello world&#39;</span></span></code></pre></div><p>说明如下：</p><ul><li>handler ： 方法名称。例如，为FC函数配置的请求处理程序为main.handler，那么函数计算会去加载main.py中定义的handler函数，并从handler函数开始执行。</li><li>event ： 调用函数时传入的参数。即响应报文的body，用JSON格式表示。</li><li>context ：为您的FC函数调用提供在调用时的运行上下文信息。</li><li>return ： 作为响应报文的body返回给客户端。</li></ul><p><strong>event</strong></p><p>event 为调用函数时传入的参数。即响应报文的body，用JSON格式表示。例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过json模块的loads()方法可以得到Python字典：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>json.loads(event)</span></span></code></pre></div><p><strong>上下文</strong></p><p>上下文对象提供了如下参数：</p><ul><li>request_id ： 请求的唯一ID</li><li>credentials ： 函数计算服务通过扮演服务角色而获取的一组临时密钥，其有效时间是36小时。包括 access_key_id、access_key_secret、security_token。</li><li>function ： 此次函数调用的基本信息，包括name、handler、memory、timeout</li><li>region： 地域ID</li><li>account_id ：阿里云主账号ID。</li></ul><h2 id="阿里云node-js函数计算" tabindex="-1">阿里云Node.js函数计算 <a class="header-anchor" href="#阿里云node-js函数计算" aria-label="Permalink to &quot;阿里云Node.js函数计算&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;event: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="腾讯云node-js云函数" tabindex="-1">腾讯云Node.js云函数 <a class="header-anchor" href="#腾讯云node-js云函数" aria-label="Permalink to &quot;腾讯云Node.js云函数&quot;">​</a></h2><p>event 参数类型为 dict，event 中包含了触发函数执行的基本信息。event对象包含了请求的所有相关信息。</p><p>context 为 SCF 平台提供的入参，将 context 入参传递给执行方法，代码可通过解析 context 入参对象。</p><p>return 返回响应报文。既可以简单的返回一个字符串，也可以返回一个复杂的对象，更详细的定义响应报文，包括响应码、响应头部、响应体。</p><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main_handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="腾讯云python云函数" tabindex="-1">腾讯云Python云函数 <a class="header-anchor" href="#腾讯云python云函数" aria-label="Permalink to &quot;腾讯云Python云函数&quot;">​</a></h2><p>示例：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main_handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, context):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;isBase64Encoded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;statusCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;headers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]},</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Heading&lt;/h1&gt;&lt;p&gt;Paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resp)</span></span></code></pre></div><h2 id="aws-lambda-python-函数计算" tabindex="-1">AWS Lambda Python 函数计算 <a class="header-anchor" href="#aws-lambda-python-函数计算" aria-label="Permalink to &quot;AWS Lambda Python 函数计算&quot;">​</a></h2><p><img src="https://pic3.zhimg.com/80/v2-8ead27a3e9b80917c4dca5c36b5f1382_1440w.webp" alt=""></p><h2 id="aws-lambda-node-js-函数计算" tabindex="-1">AWS Lambda Node.js 函数计算 <a class="header-anchor" href="#aws-lambda-node-js-函数计算" aria-label="Permalink to &quot;AWS Lambda Node.js 函数计算&quot;">​</a></h2><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EVENT: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.logStreamName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,44),l=[h];function e(p,k,d,r,o,E){return a(),i("div",null,l)}const c=s(t,[["render",e]]);export{y as __pageData,c as default};
