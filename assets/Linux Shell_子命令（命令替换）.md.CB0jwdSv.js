import{_ as s,c as a,o as e,a2 as l}from"./chunks/framework.84TDCN6B.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/子命令（命令替换）.md","filePath":"Linux Shell/子命令（命令替换）.md"}'),n={name:"Linux Shell/子命令（命令替换）.md"},t=l('<p>shell命令行或脚本最有用的特性之一是可以从命令输出中提取信息并将其赋值给变量，称为子命令，也可以叫做命令替换。</p><p>有两种等价的方式使用子命令：</p><ul><li>反引号（`）： `子命令`</li><li>美元符加圆括号： $(子命令)</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>today1=`date`</span></span>\n<span class="line"><span>echo $today1</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>today2=$(date)</span></span>\n<span class="line"><span>echo $today2</span></span></code></pre></div><p>命令替换会创建出子 shell来运行指定命令，这是由运行脚本的 shell所生成的一个独立的shell。因此，在子 shell 中运行的命令无法使用脚本中的变量。如果在命令行中使用./路径执行命令，就会创建子 shell，但如果不加路径，则不会创建子 shell。不过，内建的 shell 命令也不会创建子 shell。在命令行中运行脚本时要当心。</p>',6),p=[t];function i(o,_,c,d,h,r){return e(),a("div",null,p)}const f=s(n,[["render",i]]);export{m as __pageData,f as default};
