import{_ as l,c as i,o as e,a2 as a}from"./chunks/framework.84TDCN6B.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Linux Shell/文本编辑器——Vim的使用.md","filePath":"Linux Shell/文本编辑器——Vim的使用.md"}'),o={name:"Linux Shell/文本编辑器——Vim的使用.md"},d=a('<h2 id="vim的四种模式" tabindex="-1">vim的四种模式 <a class="header-anchor" href="#vim的四种模式" aria-label="Permalink to &quot;vim的四种模式&quot;">​</a></h2><p>vim有三种模式，要完成某种操作，首先要进入对应的模式，因为每种模式下按键的作用是不一样的。这三种模式是：</p><ul><li>普通模式 打开文件时的默认模式，这种模式下通过依次按下的组合按键完全操作，例如跳转行、删除、复制、粘贴。</li><li>底行模式 输入冒号直接进入底行模式，再输入命令。</li><li>输入模式 在此模式下像常规编辑器那样输入内容，此时编辑器左下角显示 “--INSERT--”字样，表示正在输入。</li><li>选择模式 此时编辑器左下角显示 “--VISUAL--”字样，表示正在选择一些内容。选择好之后，可以复制、删除或粘贴。</li></ul><p>值得说明的是，不同的人有对于vim的模式有不同的分类和叫法，理解意思就行。</p><hr><ul><li>Normal 模式下按下 i 进入 Insert 模式</li><li>Insert/Visual 模式下按下 Esc 进入 Normal 模式</li><li>Normal 模式下按下 v 进入 Visual 模式</li><li>Visual 模式下 y 复制，x 或者 c 剪贴，p 粘贴</li><li>Normal 模式下 u 撤销（相当于 ctrl z）</li><li>Normal 模式下输入 / 进入搜索模式，/hello+回车就是查找所有包含 hello 的字符串</li><li>Normal 模式下 Ctrl + F 翻页，0 到行首，$到行尾</li><li>Ctrl +/- 可以调整字体大小</li></ul><hr><h2 id="输入模式" tabindex="-1">输入模式 <a class="header-anchor" href="#输入模式" aria-label="Permalink to &quot;输入模式&quot;">​</a></h2><p>使用<code>vim 文件路径</code> 即可打开文件，如果该文件不存在就会新建。</p><p>vim默认打开的模式为普通模式。如果想要进入输入模式，选择如下命令中的一个：</p><ul><li>a 在光标的右边开始添加文本</li><li>A 从当前行的末尾开始添加</li><li>i 从光标的左侧开始添加</li><li>I 从当前行的开头添加</li><li>o 在当前行之下添加新行，并从新行开始输入</li><li>O 在当前行之上添加新行，并开始输入</li></ul><p>进入输入模式后，此时编辑器底部显示<code>---insert---</code>。</p><p>此时可以开始键入一些文本了，在输入模式下可以使用如下操作，这跟在常规文本编辑器中的习惯是一样的：</p><ul><li>鼠标拖拽：选择文本</li><li>按住shift键，多次按方向键：选择文本</li><li>delete，删除选择的文本</li><li>Ctrl+C 复制选择的文本</li><li>Ctrl+V 在光标左边粘贴选择的文本</li></ul><p>输入完之后，按Esc重新回到命令模式。</p><h2 id="按键模式" tabindex="-1">按键模式 <a class="header-anchor" href="#按键模式" aria-label="Permalink to &quot;按键模式&quot;">​</a></h2><ul><li>箭头键，上下左右移动</li><li>h左、l右、j下、k上</li><li>w 将光标移到下一个单词的开头（空格、制表符、标点符号分隔）</li><li>W 移动到下一个单词的开头（空格或制表符分隔）</li><li>b 移到前一个单词的开头（空格、制表符、标点符号分隔）</li><li>B 移到前一个单词的开头（空格、制表符分隔）</li><li>0（零） 移到当前行的开头</li><li><code>$</code> 移到当前行的末尾</li><li>H 移到屏幕左上角</li><li>L 移到屏幕左下角</li><li>M 移动屏幕中间行的第一个字符</li><li>x 删除光标下的字符，或者是选择的字符。如果光标是一条竖线，则删除光标右边的一个字符</li><li>X 删除光标之前的字符</li><li>dd，删除当前行</li><li>dw 删除当前光标之后的一个单词</li><li>db 删除光标位置所在的单词</li><li>c$ 先删除光标到行末尾的字符，再进入输入模式</li><li>c0 删除光标前一个字符到行开头的字符，再进入输入模式</li><li>cl 删除当前字符，进入输入模式</li><li>y) 将光标右边的当前句子复制到缓冲区</li><li>y} 将光标右边的当前段落复制到缓冲区</li><li>yy，复制当前行</li><li>3dw 删除接下来的3个单词</li><li>3dd 从当前行开始删除3行</li><li>5c1 删除接下来的5个字母，然后进入输入模式</li><li>12j 向下移动12行</li><li>5cw 删除接下来的5个单词，然后进入输入模式</li><li>4y) 复制接下来的4个句子。</li><li>p ，如果复制的内容是字母或单词，则粘贴到光标的右边；如果是文本行，则放到当前行的下一行</li><li>P 如果复制的内容是字母或单词，则粘贴到光标的左边；如果是文本行，则放到当前行的上一行</li><li>dG 删除光标所在到最后一行</li><li>d1G 删除光标所在到第一行</li><li>yG 复制光标所在行到最后一行</li><li>y1G 复制光标所在行到第一行</li><li><code>d$</code>删除光标到该行的行尾</li><li><code>d0</code>删除光标到该行的行首</li><li>y0复制光标所在到该行的行首</li><li><code>y$</code>复制光标所在到该行的行尾</li><li>u 撤销</li><li>Ctrl+R 重做</li><li>Ctrl+G 显示文件名、当前行、总行数</li><li>Ctrl+F 向前翻页，一次一页</li><li>Ctrl+B 向后翻页，一次一页</li><li>Ctrl+D 向前翻页，一次半页</li><li>Ctrl+U 向后翻页，一次半页</li><li>G 转到最后一行</li><li>1G 转到第一行</li><li>gg 转到第一行</li><li>35G 转到任意一行，如第35行</li></ul><h2 id="可视模式-visual" tabindex="-1">可视模式（visual） <a class="header-anchor" href="#可视模式-visual" aria-label="Permalink to &quot;可视模式（visual）&quot;">​</a></h2><p>可视模式也就是选择模式。</p><ul><li>v 进入字符选择模式</li><li>V 进入行选择模式</li><li>Ctrl+V 进入列选择模式</li><li>y 复制选择好的内容</li><li>d 将选择的内容删除</li><li>p ，如果复制的内容是字母或单词，则粘贴到光标的右边；如果是文本行，则放到当前行的下一行</li><li>P 如果复制的内容是字母或单词，则粘贴到光标的左边；如果是文本行，则放到当前行的上一行</li></ul><h2 id="助记" tabindex="-1">助记 <a class="header-anchor" href="#助记" aria-label="Permalink to &quot;助记&quot;">​</a></h2><ul><li>y ，yank 猛地一拉，复制的意思</li><li>p put 放下，粘贴的意思</li><li>d ，delete 删除</li></ul><h2 id="底行模式" tabindex="-1">底行模式 <a class="header-anchor" href="#底行模式" aria-label="Permalink to &quot;底行模式&quot;">​</a></h2><p>底行模式是指，此时输入焦点在最底部的那一行，用于全局的操作，在普通模式下输入两种字符可以将焦点由内容转移到底行：</p><ul><li>冒号（：） 进行保存或查找替换等</li><li>斜杠（/） 进行查找</li></ul><p>在普通模式下，先按冒号再输入相应的指令完成特定操作。输入焦点全部在左下角，所以叫底行模式键。</p><ul><li>:w 保存</li><li>:q! 强制退出而不保存</li><li>:wq 保存后退出（最常用）</li><li><code>:w 新文件名</code> 另存为新文件</li><li><code>:r 另一个文件名</code> 读入另一个文件内容追加到光标所在行的下一行</li><li><code>:!command</code> 运行shell命令，命令完成后，按enter返回vim。</li></ul><h2 id="底行模式下的查找和替换" tabindex="-1">底行模式下的查找和替换 <a class="header-anchor" href="#底行模式下的查找和替换" aria-label="Permalink to &quot;底行模式下的查找和替换&quot;">​</a></h2><ul><li><code>:/text</code> 从光标所在处往下查找，按 <code>n</code> 键查找下一个，按 <code>N</code> 键查找上一个</li><li><code>:?text</code>从光标所在处逆向查找，按 <code>n</code> 键查找下一个，按 <code>N</code> 键查找上一个。</li></ul><p>只限定部分行的查找语法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:查找范围/s/old/new/查找替换选项</span></span></code></pre></div><p>限定行部分行情况下的查找范围包括：</p><ul><li>不写，表示只查找当前行</li><li>%全部行</li><li>1,5 只查找前5行</li><li>5,$ 只查找第5行到最后一行</li></ul><p>如果不需要限定部分行，即在所有行中查找替换，则语法为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>:g/old/s//new/查找替换选项</span></span></code></pre></div><p>注意这种情况下s后面有两个斜杠，不要漏了。</p><p>查找替换选项包括：</p><ul><li>g表示全局替换，不加g只替换每行找到的第一个</li><li>i表示大小写不敏感查找</li><li>I表示大小写敏感</li><li>c表示确认每一步的替换</li></ul><p>一些示例如下：</p><ul><li><code>:s/old/new/g</code> 替换当前行的所有old到new</li><li><code>:1,5/old/new/gc</code> 在前5行中，将替换每一行的old到new，且每次都要询问</li><li><code>:%s/old/new/g</code> 在所有行中，替换所有的old到new</li><li>:g/old/s//new 在所有行中，替换首次出现的old到new</li><li>:g/old/s//new/gc 在所有行中，替换的old到new，且每次都要询问</li></ul>',40),t=[d];function c(s,r,n,p,u,h){return e(),i("div",null,t)}const v=l(o,[["render",c]]);export{_ as __pageData,v as default};
