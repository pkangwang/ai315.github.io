import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.84TDCN6B.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"React/《深入浅出React 开发指南》学习笔记.md","filePath":"React/《深入浅出React 开发指南》学习笔记.md"}'),p={name:"React/《深入浅出React 开发指南》学习笔记.md"},n=t(`<p><img src="https://m.360buyimg.com/mobilecms/s750x750_jfs/t1/226577/20/11148/58939/6596d9e9F9469da32/8f7c54148daff3fa.jpg!q80.dpg.webp" alt=""></p><p>Flux 思想：</p><ul><li>Dispatcher ： 更改数据和分发事件由Dispatcher实现</li><li>Store ： 数据层，负责保存数据，并且响应事件，更新数据源</li><li>View ： View层可以订阅更新，当数据发生更新的时候，负责通知视图重新渲染UI</li></ul><p>有了JSX语法，开发者可以在jS文件中写类似HTML的结构。</p><p>JSX只是语法糖，直接作为JS脚本运行在浏览器中会报错。JSX在编译阶段被Babel处理成ReactElement的形式。</p><p>双标签（原生HTML基本都是） ： <code>&lt;div&gt;&lt;/div&gt;</code> 单标签（React 子组件用的非常多）： <code>&lt;Comp /&gt;</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>UI  = fn(data)</span></span></code></pre></div><p>组件充当了上面公式中 fn 的角色。</p><p>基于事件的通信： <code>on &lt;————&gt; emit</code></p><p>props 父子组件的典型示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Son</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{props.text}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Father</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Son</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {text} /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello React&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;改变State&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>props 是 父子组件传值方式。</p><p>useState 是定义如何改变组件的值。</p><p>useEffect 定义该组件的任意一个值改变之后应该执行什么操作。</p><p>usesState的基本用法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[state, dispatch] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initData)</span></span></code></pre></div><p>类组件的生命周期：</p><ul><li>构造constructor</li><li>getDerivedStateFromProps</li><li>componentWillMount</li><li>渲染函数</li><li>componentDidMount</li></ul><p>props 是父组件向子组件一层一层传递数据， context是上层组件向下层组件可跨层传递数据。</p><p>Reducer 写在 Store中 改变总状态</p><p>Reducer 传入action进行处理，返回state</p><p>组件中要改变总状态 dispatch 触发一个action</p><p>组件中要获取总状态的改变，subscribe 订阅一个action</p><p>状态管理 ： 传递 ： 通信 ： 订阅 ：</p><p>事件通信的统一范式 ： 订阅和触发</p>`,25),l=[n];function e(h,k,E,d,r,c){return a(),i("div",null,l)}const y=s(p,[["render",e]]);export{o as __pageData,y as default};
