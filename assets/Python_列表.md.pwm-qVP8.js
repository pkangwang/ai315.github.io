import{_ as s,c as a,o as p,a2 as n}from"./chunks/framework.84TDCN6B.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python/列表.md","filePath":"Python/列表.md"}'),t={name:"Python/列表.md"},e=n(`<p>列表是一个包含任意对象的有序集合。与字符串和元组不同，列表是可变的：不仅长度可变，元素值也可变。</p><p>通常使用中括号新建一个列表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list1 = [] # 空列表</span></span>
<span class="line"><span>list2 = [1, &#39;hello&#39; ,2.5] # 三个元素的列表</span></span></code></pre></div><p>通过len()函数得到列表的长度：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list3 = [1,2,3]</span></span>
<span class="line"><span>print(len(list3)) // 3</span></span></code></pre></div><p>列表中的元素值是可以重复的：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list6 = [1,2,1,1,2]</span></span>
<span class="line"><span>print(len(list6))  # 5</span></span></code></pre></div><p><strong>列表的索引</strong></p><p>通过中括号和索引可以得到某一位置该元素的值，索引从0开始：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list4 = [1,&#39;hello&#39;, 2, 5.6]</span></span>
<span class="line"><span>print(list4[1])  # &#39;hello&#39; ：得到第二个元素</span></span></code></pre></div><p>值得一提的是，索引还可以是负数， <code>-1</code>表示最后一个元素，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list4 = [1,&#39;hello&#39;, 2, 5.6]</span></span>
<span class="line"><span>print(list4[-1])  # 5.6 ：得到最后一个元素</span></span></code></pre></div><p><strong>列表的切片</strong></p><p>可以提取列表的某一范围内的元素，得到一个新的列表。<code>[n:m]</code>表示第n+1个元素到第m个元素。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list7 = [1,2,3,4,5,6,7,8]</span></span>
<span class="line"><span>list8 = list7[2:5]  </span></span>
<span class="line"><span>print(list8) # [3,4,5] : 返回第3个元素到第5个元素</span></span></code></pre></div><p><strong>列表的迭代</strong></p><p>很多使用，需要对列表的每一个元素执行相同的操作，这叫做列表的迭代。使用内置的map()函数可以完成，map()函数的用法是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>map(迭代函数, 可迭代对象)</span></span></code></pre></div><p>非常需要注意的是，map()函数的返回结果是一个map对象，map对象也是可迭代对象，并不是我们所期待的传入对象的类型。</p><p>迭代函数通常是一个匿名函数，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>list9 = [2,3,4,5]</span></span>
<span class="line"><span>list10 = map(lambda x:x**2, list9)</span></span>
<span class="line"><span>print(list10) # &lt;map object at 0x0000025024539D20&gt; : map对象</span></span>
<span class="line"><span>list11 = list(list10) # 通过list()方法包装成一个新的list对象</span></span>
<span class="line"><span>print(list11) # [4, 9, 16, 25]</span></span></code></pre></div>`,21),i=[e];function l(c,o,d,h,g,r){return p(),a("div",null,i)}const m=s(t,[["render",l]]);export{v as __pageData,m as default};
